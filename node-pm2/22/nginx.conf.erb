<%
  require 'uri'
  # pulling from APP_URL kept for backward-compatibility, but should only ever contain a domain name
  APP_DOMAIN = ENV.fetch('APP_DOMAIN', ENV.fetch('APP_URL', 'app.invalid'))
  CG_ENVIRONMENT = ENV.fetch('CG_ENVIRONMENT', 'local')
  NODE_ENV = ENV.fetch('NODE_ENV', 'production')

  HTTP_PORT = ENV.fetch('CG_HTTP_PORT', '8080')
  HTTP_PORT = nil if HTTP_PORT.empty?
  HTTPS_PORT = ENV.fetch('CG_HTTPS_PORT', '8443')
  HTTPS_PORT = nil if HTTPS_PORT.empty?

  APP_PORT = HTTPS_PORT || HTTP_PORT
  REDIRECT_PORT = HTTP_PORT != HTTPS_PORT ? HTTP_PORT : nil
%>
worker_processes <%= ENV.fetch('NGINX_WORKER_COUNT', (NODE_ENV == 'production' ? 'auto' : 1)) %>;
pid /var/run/nginx.pid;
daemon off;

# Add files to white list env variables
include /usr/src/nginx/main.d/*.conf;

# Include modules
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections <%= ENV.fetch('NGINX_WORKER_CONNECTIONS', '1024') %>;
}

http {
    <% if CG_ENVIRONMENT != 'local' %>
        log_format combined_json escape=json '{ '
          '"amzn_trace_id": "$http_x_amzn_trace_id", '
          '"body_bytes_sent": "$body_bytes_sent", '
          '"http_referrer": "$http_referer", '
          '"http_user_agent": "$http_user_agent", '
          '"remote_addr": "$remote_addr", '
          '"remote_user": "$remote_user", '
          '"request": "$request", '
          '"path": "$request_uri", '
          '"request_context_id": "$http_x_request_context_id", '
          '"request_hostname": "$host", '
          '"request_id": "$request_id", '
          '"request_time": "$request_time", '
          '"status": "$status", '
          '"time_local": "$time_local" '
          '}';
        access_log /var/log/nginx/access.log combined_json;
    <% else %>
        access_log /var/log/nginx/access.log;
    <% end %>
    error_log /var/log/nginx/error.log;

    more_clear_headers 'X-Powered-By';
    server_tokens off;
    client_body_timeout    65;
    client_header_timeout  65;
    client_max_body_size <%= ENV.fetch('NGINX_MAX_UPLOAD_SIZE', '10m') %>;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    keepalive_timeout  65;

    # Add files here to add additional nginx options
    include      /usr/src/nginx/conf.d/*.conf;

    <% if REDIRECT_PORT %>
        server {
            listen       <%= REDIRECT_PORT %> default_server;
            server_name  redirect;
            access_log   off;
            if ($host = $remote_addr) {
                return   301 https://<%= APP_DOMAIN %>$request_uri;
            }
            return       301 https://$host$request_uri;
        }
    <% end %>

    server {
        listen       <%= APP_PORT %> default_server;
        server_name  <%= APP_DOMAIN %>;
        root <%= ENV.fetch('APP_ROOT_PATH', '/usr/src/app/public') %>;

        <% if CG_ENVIRONMENT != 'local' %>
            add_header Strict-Transport-Security "max-age=31536000" always;

            set_real_ip_from 10.0.0.0/8;
            real_ip_header X-Forwarded-For;
            real_ip_recursive on;
        <% end %>

        location / {
            proxy_pass      http://127.0.0.1:3000;

            # Occasionally you may need to add some additional option to your location block, you can add files here to do so.
            include      /usr/src/nginx/location.d/*.conf;
        }

        # Custom location blocks can be added to files here.
        include /usr/src/nginx/server.d/*.conf;

        location ~ /\.git {
            deny all;
        }
    }
}
